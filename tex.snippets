global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

snippet beg "begin{} / end{}"
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet sec "sec{}"
\section{$1}$0
endsnippet

snippet sub "subsec{}"
\subsection{$1}$0
endsnippet

snippet subsub "subsubsec{}"
\subsubsection{$1}$0
endsnippet

snippet ci "cite{}"
\cite{$1}$0
endsnippet

snippet ref "ref{}"
\ref{$1}$0
endsnippet

snippet it "textit{}"
\textit{$1}$0
endsnippet

snippet eq "begin{eq} / end{eq}"
\\begin{equation}\label{eq:$1}
	$0
.\\end{equation}
endsnippet

snippet eqq "begin{eq*} / end{eq*}"
\\begin{equation*}
	$0
.\\end{equation*}
endsnippet

snippet bf "bold font"
\textbf{$1}$0
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.7\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet svg "svg figure" b
\begin{figure}[${1:H}]
	\centering
	\includesvg[width=0.7\textwidth]{../figures/$2.svg}
	\caption{${3:$2}}
	\label{fig:${4:${2/\W+/-/g}}}
\end{figure}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet si "SI units" 
\SI{$1}{$2} $0
endsnippet

snippet col "colored text" 
\textcolor{${1:red}}{${2:text}} $0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet b "bold font"
\mathbf{$1}$0
endsnippet



